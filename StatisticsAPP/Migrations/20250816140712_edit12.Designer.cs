// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StatisticsAPP.Data;

#nullable disable

namespace StatisticsAPP.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250816140712_edit12")]
    partial class edit12
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("StatisticsAPP.Models.Auth.Operation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Operations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "ADD_USER",
                            Name = "إضافة مستخدم",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Code = "EDIT_USER",
                            Name = "تعديل مستخدم",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            Code = "DELETE_USER",
                            Name = "حذف مستخدم",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("StatisticsAPP.Models.Auth.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "ADMIN",
                            Name = "مدير النظام",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Code = "JUDGE",
                            Name = "قاضٍ",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("StatisticsAPP.Models.Auth.RoleOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdOperation")
                        .HasColumnType("int");

                    b.Property<int>("IdRole")
                        .HasColumnType("int");

                    b.Property<int?>("OperationId")
                        .HasColumnType("int");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdOperation");

                    b.HasIndex("OperationId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.HasIndex("IdRole", "IdOperation")
                        .IsUnique();

                    b.ToTable("RoleOperations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IdOperation = 1,
                            IdRole = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            IdOperation = 2,
                            IdRole = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            IdOperation = 3,
                            IdRole = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("StatisticsAPP.Models.Auth.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("Enable")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FullName")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = 0,
                            Enable = true,
                            FullName = "مدير النظام",
                            Password = "ADMIN",
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("StatisticsAPP.Models.Auth.UserCircles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdCircle")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdCircle");

                    b.HasIndex("IdUser");

                    b.ToTable("UserCircles");
                });

            modelBuilder.Entity("StatisticsAPP.Models.Auth.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdRole")
                        .HasColumnType("int");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("UserCreatedId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdRole");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId1");

                    b.HasIndex("UserId", "IdRole")
                        .IsUnique();

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdRole = 1,
                            UserCreatedId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("StatisticsAPP.Models.Auth.UserSupCourts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdSupCourt")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdSupCourt");

                    b.HasIndex("IdUser");

                    b.ToTable("UserSupCourts");
                });

            modelBuilder.Entity("StatisticsAPP.Models.Auth.UserSuperCourts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdSuperCourt")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdSuperCourt");

                    b.HasIndex("IdUser");

                    b.ToTable("UserSuperCourts");
                });

            modelBuilder.Entity("StatisticsAPP.Models.CircleModels.Circle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enable")
                        .HasColumnType("bit");

                    b.Property<int>("IdCircleCategory")
                        .HasColumnType("int");

                    b.Property<int>("IdSupCourt")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdCircleCategory");

                    b.HasIndex("IdSupCourt");

                    b.HasIndex("UserId");

                    b.ToTable("Circles");
                });

            modelBuilder.Entity("StatisticsAPP.Models.CircleModels.CircleCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CircleCategories");
                });

            modelBuilder.Entity("StatisticsAPP.Models.CircleModels.CircleDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CircleId")
                        .HasColumnType("int");

                    b.Property<int>("CircleTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CircleId");

                    b.HasIndex("CircleTypeId");

                    b.ToTable("CircleDays");
                });

            modelBuilder.Entity("StatisticsAPP.Models.CircleModels.CircleJudge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CircleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCircle")
                        .HasColumnType("int");

                    b.Property<int>("IdJudge")
                        .HasColumnType("int");

                    b.Property<int?>("JudgeId")
                        .HasColumnType("int");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CircleId");

                    b.HasIndex("IdCircle");

                    b.HasIndex("JudgeId");

                    b.HasIndex("UserId");

                    b.HasIndex("IdJudge", "IdCircle", "DateStart", "DateEnd")
                        .IsUnique()
                        .HasFilter("[DateEnd] IS NOT NULL");

                    b.ToTable("CircleJudges");
                });

            modelBuilder.Entity("StatisticsAPP.Models.CircleModels.CircleMasterType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CircleMasterTypes");
                });

            modelBuilder.Entity("StatisticsAPP.Models.CircleModels.CircleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCircleMasterType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdCircleMasterType");

                    b.HasIndex("UserId");

                    b.ToTable("CircleTypes");
                });

            modelBuilder.Entity("StatisticsAPP.Models.CourtsModels.SupCourt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SuperCourtId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SuperCourtId");

                    b.HasIndex("UserId");

                    b.ToTable("SupCourts");
                });

            modelBuilder.Entity("StatisticsAPP.Models.CourtsModels.SuperCourt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SuperCourts");
                });

            modelBuilder.Entity("StatisticsAPP.Models.DecisionModels.Decision", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdDecisionCategory")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdDecisionCategory");

                    b.HasIndex("UserId");

                    b.ToTable("Decisions");
                });

            modelBuilder.Entity("StatisticsAPP.Models.DecisionModels.DecisionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsFather")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentID")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DecisionCategories");
                });

            modelBuilder.Entity("StatisticsAPP.Models.DelayCasesModels.DelayCase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DelayCases");
                });

            modelBuilder.Entity("StatisticsAPP.Models.InterCasesModels.InterCase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdInterCasesCategory")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdInterCasesCategory");

                    b.HasIndex("UserId");

                    b.ToTable("InterCases");
                });

            modelBuilder.Entity("StatisticsAPP.Models.InterCasesModels.InterCasesCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsFather")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentID")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("InterCasesCategories");
                });

            modelBuilder.Entity("StatisticsAPP.Models.InterCasesModels.Shortening", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CaseYearId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCircleStatistics")
                        .HasColumnType("int");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CaseYearId");

                    b.HasIndex("IdCircleStatistics");

                    b.HasIndex("UserId");

                    b.ToTable("Shortenings");
                });

            modelBuilder.Entity("StatisticsAPP.Models.JudgeModels.Judge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Degree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SeniorityNumber")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Judges");
                });

            modelBuilder.Entity("StatisticsAPP.Models.StatisticsModels.CaseYear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOld")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CaseYears");
                });

            modelBuilder.Entity("StatisticsAPP.Models.StatisticsModels.CircleStatistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountCaseYear")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DayOfWork")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Employee")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EndCaseYear")
                        .HasColumnType("int");

                    b.Property<int>("IdCircleDay")
                        .HasColumnType("int");

                    b.Property<bool>("IsNew")
                        .HasColumnType("bit");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<int>("StartCaseYear")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdCircleDay");

                    b.HasIndex("UserId");

                    b.ToTable("CircleStatistics");
                });

            modelBuilder.Entity("StatisticsAPP.Models.StatisticsModels.DelayCacesForMonth", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("IdCaseYear")
                        .HasColumnType("int");

                    b.Property<int>("IdCircleDay")
                        .HasColumnType("int");

                    b.Property<int>("IdCircleStatistics")
                        .HasColumnType("int");

                    b.Property<int>("IdDelayCacesForMonthType")
                        .HasColumnType("int");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdCaseYear");

                    b.HasIndex("IdCircleDay");

                    b.HasIndex("IdCircleStatistics");

                    b.HasIndex("IdDelayCacesForMonthType");

                    b.ToTable("DelayCacesForMonths");
                });

            modelBuilder.Entity("StatisticsAPP.Models.StatisticsModels.DelayCacesForMonthType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("delayCacesForMonthTypes");
                });

            modelBuilder.Entity("StatisticsAPP.Models.StatisticsModels.Sapek", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("IdCaseYear")
                        .HasColumnType("int");

                    b.Property<int>("IdCircleDay")
                        .HasColumnType("int");

                    b.Property<int>("IdCircleStatistics")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdCaseYear");

                    b.HasIndex("IdCircleDay");

                    b.HasIndex("IdCircleStatistics");

                    b.ToTable("Sapeks");
                });

            modelBuilder.Entity("StatisticsAPP.Models.StatisticsModels.StatisticsDecisions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CaseYearId")
                        .HasColumnType("int");

                    b.Property<int?>("CircleJudgeId")
                        .HasColumnType("int");

                    b.Property<int?>("CircleStatisticsId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCircleStatistics")
                        .HasColumnType("int");

                    b.Property<int>("IdDecision")
                        .HasColumnType("int");

                    b.Property<int>("IdJudge")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CaseYearId");

                    b.HasIndex("CircleJudgeId");

                    b.HasIndex("CircleStatisticsId");

                    b.HasIndex("IdCircleStatistics");

                    b.HasIndex("IdDecision");

                    b.HasIndex("IdJudge");

                    b.HasIndex("UserId");

                    b.ToTable("StatisticsDecisions");
                });

            modelBuilder.Entity("StatisticsAPP.Models.StatisticsModels.StatisticsDelayCases", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CaseYearId")
                        .HasColumnType("int");

                    b.Property<int?>("CircleStatisticsId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCircleStatistics")
                        .HasColumnType("int");

                    b.Property<int>("IdDelayCase")
                        .HasColumnType("int");

                    b.Property<int>("MonthDelay")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("YearDelay")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CaseYearId");

                    b.HasIndex("CircleStatisticsId");

                    b.HasIndex("IdCircleStatistics");

                    b.HasIndex("IdDelayCase");

                    b.HasIndex("UserId");

                    b.ToTable("StatisticsDelayCases");
                });

            modelBuilder.Entity("StatisticsAPP.Models.StatisticsModels.StatisticsDeleted", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CaseYearId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCircleStatistics")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CaseYearId");

                    b.HasIndex("IdCircleStatistics");

                    b.HasIndex("UserId");

                    b.ToTable("StatisticsDeleteds");
                });

            modelBuilder.Entity("StatisticsAPP.Models.StatisticsModels.StatisticsInterCases", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CaseYearId")
                        .HasColumnType("int");

                    b.Property<int?>("CircleStatisticsId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCircleStatistics")
                        .HasColumnType("int");

                    b.Property<int>("IdInterCase")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CaseYearId");

                    b.HasIndex("CircleStatisticsId");

                    b.HasIndex("IdCircleStatistics");

                    b.HasIndex("IdInterCase");

                    b.HasIndex("UserId");

                    b.ToTable("StatisticsInterCases");
                });

            modelBuilder.Entity("StatisticsAPP.Models.Auth.Operation", b =>
                {
                    b.HasOne("StatisticsAPP.Models.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("StatisticsAPP.Models.Auth.Role", b =>
                {
                    b.HasOne("StatisticsAPP.Models.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("StatisticsAPP.Models.Auth.RoleOperation", b =>
                {
                    b.HasOne("StatisticsAPP.Models.Auth.Operation", "Operation")
                        .WithMany()
                        .HasForeignKey("IdOperation")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("StatisticsAPP.Models.Auth.Role", "Role")
                        .WithMany()
                        .HasForeignKey("IdRole")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("StatisticsAPP.Models.Auth.Operation", null)
                        .WithMany("RoleOperations")
                        .HasForeignKey("OperationId");

                    b.HasOne("StatisticsAPP.Models.Auth.Role", null)
                        .WithMany("RoleOperations")
                        .HasForeignKey("RoleId");

                    b.HasOne("StatisticsAPP.Models.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operation");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StatisticsAPP.Models.Auth.UserCircles", b =>
                {
                    b.HasOne("StatisticsAPP.Models.CircleModels.Circle", "Circle")
                        .WithMany()
                        .HasForeignKey("IdCircle")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StatisticsAPP.Models.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Circle");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StatisticsAPP.Models.Auth.UserRole", b =>
                {
                    b.HasOne("StatisticsAPP.Models.Auth.Role", "Role")
                        .WithMany()
                        .HasForeignKey("IdRole")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("StatisticsAPP.Models.Auth.Role", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId");

                    b.HasOne("StatisticsAPP.Models.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("StatisticsAPP.Models.Auth.User", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId1");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StatisticsAPP.Models.Auth.UserSupCourts", b =>
                {
                    b.HasOne("StatisticsAPP.Models.CourtsModels.SupCourt", "SupCourt")
                        .WithMany()
                        .HasForeignKey("IdSupCourt")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StatisticsAPP.Models.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SupCourt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StatisticsAPP.Models.Auth.UserSuperCourts", b =>
                {
                    b.HasOne("StatisticsAPP.Models.CourtsModels.SuperCourt", "SuperCourt")
                        .WithMany()
                        .HasForeignKey("IdSuperCourt")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StatisticsAPP.Models.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SuperCourt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StatisticsAPP.Models.CircleModels.Circle", b =>
                {
                    b.HasOne("StatisticsAPP.Models.CircleModels.CircleCategory", "CircleCategory")
                        .WithMany()
                        .HasForeignKey("IdCircleCategory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StatisticsAPP.Models.CourtsModels.SupCourt", "SupCourt")
                        .WithMany("Circles")
                        .HasForeignKey("IdSupCourt")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StatisticsAPP.Models.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CircleCategory");

                    b.Navigation("SupCourt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StatisticsAPP.Models.CircleModels.CircleCategory", b =>
                {
                    b.HasOne("StatisticsAPP.Models.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("StatisticsAPP.Models.CircleModels.CircleDay", b =>
                {
                    b.HasOne("StatisticsAPP.Models.CircleModels.Circle", "Circle")
                        .WithMany("CircleDays")
                        .HasForeignKey("CircleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StatisticsAPP.Models.CircleModels.CircleType", "CircleType")
                        .WithMany()
                        .HasForeignKey("CircleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Circle");

                    b.Navigation("CircleType");
                });

            modelBuilder.Entity("StatisticsAPP.Models.CircleModels.CircleJudge", b =>
                {
                    b.HasOne("StatisticsAPP.Models.CircleModels.Circle", null)
                        .WithMany("CircleJudges")
                        .HasForeignKey("CircleId");

                    b.HasOne("StatisticsAPP.Models.CircleModels.Circle", "Circle")
                        .WithMany()
                        .HasForeignKey("IdCircle")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StatisticsAPP.Models.JudgeModels.Judge", "Judge")
                        .WithMany()
                        .HasForeignKey("IdJudge")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StatisticsAPP.Models.JudgeModels.Judge", null)
                        .WithMany("CircleJudges")
                        .HasForeignKey("JudgeId");

                    b.HasOne("StatisticsAPP.Models.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Circle");

                    b.Navigation("Judge");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StatisticsAPP.Models.CircleModels.CircleType", b =>
                {
                    b.HasOne("StatisticsAPP.Models.CircleModels.CircleMasterType", "CircleMasterType")
                        .WithMany()
                        .HasForeignKey("IdCircleMasterType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StatisticsAPP.Models.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CircleMasterType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StatisticsAPP.Models.CourtsModels.SupCourt", b =>
                {
                    b.HasOne("StatisticsAPP.Models.CourtsModels.SuperCourt", "SuperCourt")
                        .WithMany()
                        .HasForeignKey("SuperCourtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StatisticsAPP.Models.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SuperCourt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StatisticsAPP.Models.CourtsModels.SuperCourt", b =>
                {
                    b.HasOne("StatisticsAPP.Models.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("StatisticsAPP.Models.DecisionModels.Decision", b =>
                {
                    b.HasOne("StatisticsAPP.Models.DecisionModels.DecisionCategory", "DecisionCategory")
                        .WithMany("Decisions")
                        .HasForeignKey("IdDecisionCategory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StatisticsAPP.Models.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DecisionCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StatisticsAPP.Models.DecisionModels.DecisionCategory", b =>
                {
                    b.HasOne("StatisticsAPP.Models.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("StatisticsAPP.Models.DelayCasesModels.DelayCase", b =>
                {
                    b.HasOne("StatisticsAPP.Models.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("StatisticsAPP.Models.InterCasesModels.InterCase", b =>
                {
                    b.HasOne("StatisticsAPP.Models.InterCasesModels.InterCasesCategory", "InterCasesCategory")
                        .WithMany()
                        .HasForeignKey("IdInterCasesCategory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StatisticsAPP.Models.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InterCasesCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StatisticsAPP.Models.InterCasesModels.InterCasesCategory", b =>
                {
                    b.HasOne("StatisticsAPP.Models.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("StatisticsAPP.Models.InterCasesModels.Shortening", b =>
                {
                    b.HasOne("StatisticsAPP.Models.StatisticsModels.CaseYear", "CaseYear")
                        .WithMany()
                        .HasForeignKey("CaseYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StatisticsAPP.Models.StatisticsModels.CircleStatistics", "CircleStatistics")
                        .WithMany("Shortening")
                        .HasForeignKey("IdCircleStatistics")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StatisticsAPP.Models.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CaseYear");

                    b.Navigation("CircleStatistics");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StatisticsAPP.Models.JudgeModels.Judge", b =>
                {
                    b.HasOne("StatisticsAPP.Models.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("StatisticsAPP.Models.StatisticsModels.CircleStatistics", b =>
                {
                    b.HasOne("StatisticsAPP.Models.CircleModels.CircleDay", "CircleDay")
                        .WithMany("CircleStatistics")
                        .HasForeignKey("IdCircleDay")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StatisticsAPP.Models.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CircleDay");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StatisticsAPP.Models.StatisticsModels.DelayCacesForMonth", b =>
                {
                    b.HasOne("StatisticsAPP.Models.StatisticsModels.CaseYear", "CaseYear")
                        .WithMany()
                        .HasForeignKey("IdCaseYear")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StatisticsAPP.Models.CircleModels.CircleDay", "CircleDay")
                        .WithMany("DelayCacesForMonths")
                        .HasForeignKey("IdCircleDay")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StatisticsAPP.Models.StatisticsModels.CircleStatistics", "CircleStatistics")
                        .WithMany("DelayCacesForMonths")
                        .HasForeignKey("IdCircleStatistics")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StatisticsAPP.Models.StatisticsModels.DelayCacesForMonthType", "DelayCacesForMonthType")
                        .WithMany()
                        .HasForeignKey("IdDelayCacesForMonthType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CaseYear");

                    b.Navigation("CircleDay");

                    b.Navigation("CircleStatistics");

                    b.Navigation("DelayCacesForMonthType");
                });

            modelBuilder.Entity("StatisticsAPP.Models.StatisticsModels.Sapek", b =>
                {
                    b.HasOne("StatisticsAPP.Models.StatisticsModels.CaseYear", "CaseYear")
                        .WithMany()
                        .HasForeignKey("IdCaseYear")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StatisticsAPP.Models.CircleModels.CircleDay", "CircleDay")
                        .WithMany()
                        .HasForeignKey("IdCircleDay")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StatisticsAPP.Models.StatisticsModels.CircleStatistics", "CircleStatistics")
                        .WithMany("Sapek")
                        .HasForeignKey("IdCircleStatistics")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CaseYear");

                    b.Navigation("CircleDay");

                    b.Navigation("CircleStatistics");
                });

            modelBuilder.Entity("StatisticsAPP.Models.StatisticsModels.StatisticsDecisions", b =>
                {
                    b.HasOne("StatisticsAPP.Models.StatisticsModels.CaseYear", "CaseYear")
                        .WithMany()
                        .HasForeignKey("CaseYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StatisticsAPP.Models.CircleModels.CircleJudge", null)
                        .WithMany("StatisticsDecisions")
                        .HasForeignKey("CircleJudgeId");

                    b.HasOne("StatisticsAPP.Models.StatisticsModels.CircleStatistics", null)
                        .WithMany("StatisticsDecisions")
                        .HasForeignKey("CircleStatisticsId");

                    b.HasOne("StatisticsAPP.Models.StatisticsModels.CircleStatistics", "CircleStatistics")
                        .WithMany()
                        .HasForeignKey("IdCircleStatistics")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StatisticsAPP.Models.DecisionModels.Decision", "Decision")
                        .WithMany()
                        .HasForeignKey("IdDecision")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StatisticsAPP.Models.JudgeModels.Judge", "Judge")
                        .WithMany()
                        .HasForeignKey("IdJudge")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StatisticsAPP.Models.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CaseYear");

                    b.Navigation("CircleStatistics");

                    b.Navigation("Decision");

                    b.Navigation("Judge");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StatisticsAPP.Models.StatisticsModels.StatisticsDelayCases", b =>
                {
                    b.HasOne("StatisticsAPP.Models.StatisticsModels.CaseYear", "CaseYear")
                        .WithMany()
                        .HasForeignKey("CaseYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StatisticsAPP.Models.StatisticsModels.CircleStatistics", null)
                        .WithMany("StatisticsDelayCases")
                        .HasForeignKey("CircleStatisticsId");

                    b.HasOne("StatisticsAPP.Models.StatisticsModels.CircleStatistics", "CircleStatistics")
                        .WithMany()
                        .HasForeignKey("IdCircleStatistics")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StatisticsAPP.Models.DelayCasesModels.DelayCase", "DelayCase")
                        .WithMany()
                        .HasForeignKey("IdDelayCase")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StatisticsAPP.Models.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CaseYear");

                    b.Navigation("CircleStatistics");

                    b.Navigation("DelayCase");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StatisticsAPP.Models.StatisticsModels.StatisticsDeleted", b =>
                {
                    b.HasOne("StatisticsAPP.Models.StatisticsModels.CaseYear", "CaseYear")
                        .WithMany()
                        .HasForeignKey("CaseYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StatisticsAPP.Models.StatisticsModels.CircleStatistics", "CircleStatistics")
                        .WithMany("StatisticsDeleted")
                        .HasForeignKey("IdCircleStatistics")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StatisticsAPP.Models.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CaseYear");

                    b.Navigation("CircleStatistics");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StatisticsAPP.Models.StatisticsModels.StatisticsInterCases", b =>
                {
                    b.HasOne("StatisticsAPP.Models.StatisticsModels.CaseYear", "CaseYear")
                        .WithMany()
                        .HasForeignKey("CaseYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StatisticsAPP.Models.StatisticsModels.CircleStatistics", null)
                        .WithMany("StatisticsInterCases")
                        .HasForeignKey("CircleStatisticsId");

                    b.HasOne("StatisticsAPP.Models.StatisticsModels.CircleStatistics", "CircleStatistics")
                        .WithMany()
                        .HasForeignKey("IdCircleStatistics")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StatisticsAPP.Models.InterCasesModels.InterCase", "InterCase")
                        .WithMany()
                        .HasForeignKey("IdInterCase")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StatisticsAPP.Models.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CaseYear");

                    b.Navigation("CircleStatistics");

                    b.Navigation("InterCase");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StatisticsAPP.Models.Auth.Operation", b =>
                {
                    b.Navigation("RoleOperations");
                });

            modelBuilder.Entity("StatisticsAPP.Models.Auth.Role", b =>
                {
                    b.Navigation("RoleOperations");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("StatisticsAPP.Models.Auth.User", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("StatisticsAPP.Models.CircleModels.Circle", b =>
                {
                    b.Navigation("CircleDays");

                    b.Navigation("CircleJudges");
                });

            modelBuilder.Entity("StatisticsAPP.Models.CircleModels.CircleDay", b =>
                {
                    b.Navigation("CircleStatistics");

                    b.Navigation("DelayCacesForMonths");
                });

            modelBuilder.Entity("StatisticsAPP.Models.CircleModels.CircleJudge", b =>
                {
                    b.Navigation("StatisticsDecisions");
                });

            modelBuilder.Entity("StatisticsAPP.Models.CourtsModels.SupCourt", b =>
                {
                    b.Navigation("Circles");
                });

            modelBuilder.Entity("StatisticsAPP.Models.DecisionModels.DecisionCategory", b =>
                {
                    b.Navigation("Decisions");
                });

            modelBuilder.Entity("StatisticsAPP.Models.JudgeModels.Judge", b =>
                {
                    b.Navigation("CircleJudges");
                });

            modelBuilder.Entity("StatisticsAPP.Models.StatisticsModels.CircleStatistics", b =>
                {
                    b.Navigation("DelayCacesForMonths");

                    b.Navigation("Sapek");

                    b.Navigation("Shortening");

                    b.Navigation("StatisticsDecisions");

                    b.Navigation("StatisticsDelayCases");

                    b.Navigation("StatisticsDeleted");

                    b.Navigation("StatisticsInterCases");
                });
#pragma warning restore 612, 618
        }
    }
}
